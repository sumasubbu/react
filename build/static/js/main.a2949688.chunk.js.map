{"version":3,"sources":["serviceWorker.js","components/TodoItem.js","todolist.js","components/Todo.js","index.js"],"names":["Boolean","window","location","hostname","match","TodoItem","props","className","type","checked","item","completed","text","todolist","id","Todo","tododata","map","key","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"uMAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,KCNSC,MATf,SAAkBC,GAChB,OACE,yBAAKC,UAAY,YACf,2BAAOC,KAAK,WAAWC,QAASH,EAAMI,KAAKC,YAC/C,+BAAQL,EAAMI,KAAKE,QCoBNC,EAzBE,CACb,CACIC,GAAI,EACJF,KAAM,qBACND,WAAU,GAGd,CACIG,GAAG,EACHF,KAAK,oBACLD,WAAW,GAEf,CACIG,GAAG,EACHF,KAAK,iDACLD,WAAW,GAEf,CACIG,GAAG,EACHF,KAAK,uBACLD,WAAU,ICTHI,MATf,WACE,IAAMC,EAAWH,EAASI,KAAI,SAAAP,GAAI,OAAI,kBAAC,EAAD,CAAUQ,IAAKR,EAAKI,GAAIJ,KAAMA,OACpE,OACE,yBAAKH,UAAY,YACdS,ICFPG,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SJ6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.a2949688.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport \"./css/style.css\"\n\nfunction TodoItem(props) {\n  return (\n    <div className = \"todoItem\">\n      <input type=\"checkbox\" checked={props.item.completed}></input>\n  <label>{props.item.text}</label>\n    </div>\n  )\n}\n\nexport default TodoItem;\n","\n\nconst todolist = [\n    {\n        id: 1,\n        text: \"Take the trash out\",\n        completed:true\n\n    },\n    {\n        id:2,\n        text:\"Vacuum the carpet\",\n        completed: false\n    },\n    {\n        id:3,\n        text:\"Configure the DNS setting of the custom domain\",\n        completed: false\n    },\n    {\n        id:4,\n        text:\"Exercise for 30 mins\",\n        completed:true\n    }\n\n]\n\nexport default todolist","import React from \"react\";\nimport TodoItem from \"./TodoItem\";\nimport todolist from \"../todolist\"\n\nfunction Todo() {\n  const tododata = todolist.map(item => <TodoItem key={item.id} item={item} />)\n  return (\n    <div className = \"todoList\">\n      {tododata}\n    </div>\n  );\n}\n\nexport default Todo;\n","import React from \"react\"\nimport ReactDOM from \"react-dom\"\nimport * as serviceWorker from './serviceWorker';\nimport Todo from \"./components/Todo\"\n\n\nReactDOM.render(<Todo />,document.getElementById(\"root\"))\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}